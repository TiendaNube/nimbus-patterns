---
description: React component development standards and best practices
globs: **/*.tsx,**/*.ts
alwaysApply: false
---
# React Component Development Rules

## Component Structure

1. **File Organization**:
   - One component per file
   - Component file should match component name
   - Keep related files (types, tests, stories) in the same directory
   - Sub-components are created inside the src/components/ directory of the specific package
   - Each component inside react/src/components is its own NPM package, which means it has its own package.json, webpack.config.ts and tsconfig.ts files.

2. **Component Design**:
   - Focus on reusability and composability
   - Follow single responsibility principle
   - Use proper prop interfaces
   - Implement proper TypeScript types
   - For each component and sub-component, set the displayName property
   - All components should be a constant with the type of 'React.FC<ComponentProps>' to ensure we can set displayName property

## Styling Guidelines

1. **Style Implementation**:
   - We do NOT use custom styles in this repository
   - NEVER use custom SCSS/CSS

## Accessibility

1. **WCAG Compliance**:
   - Follow WCAG 2.1 guidelines
   - Implement proper ARIA attributes
   - Ensure keyboard navigation support
   - Maintain proper focus management

2. **Cross-Browser Support**:
   - Ensure cross-browser compatibility
   - Implement progressive enhancement
   - Test across major browsers

## Documentation

1. **JSDoc Comments**:
   - Document all components with JSDoc
   - Include component description
   - Document all props with types and descriptions
   - Explain complex logic
   - Add relevant references

2. **Storybook Documentation**:
   - Create comprehensive stories
   - Document component usage
   - Include examples of different states
   - Add controls for all props

## Testing

1. **Test Coverage**:
   - Write Jest unit tests for all components
   - Test all component states
   - Test accessibility features
   - Test edge cases

2. **Performance**:
   - Implement proper memoization
   - Optimize render cycles
   - Handle large lists efficiently
   - Monitor bundle size

## Maintenance

1. Keep components focused and maintainable
2. Update documentation with changes
3. Ensure proper test coverage
4. Monitor performance metrics
5. Review accessibility compliance
6. Follow design system updates